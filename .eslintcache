[{"/home/runner/Create-React-App-3/src/index.js":"1","/home/runner/Create-React-App-3/src/App.js":"2","/home/runner/Create-React-App-3/src/components/SortingActivity.js":"3","/home/runner/Create-React-App-3/src/components/LoopsActivity.js":"4","/home/runner/Create-React-App-3/src/components/ConditionalActivity.js":"5","/home/runner/Create-React-App-3/src/components/VariableActivity.js":"6"},{"size":505,"mtime":1607397823957,"results":"7","hashOfConfig":"8"},{"size":1098,"mtime":1607397078310,"results":"9","hashOfConfig":"8"},{"size":12200,"mtime":1607395572788,"results":"10","hashOfConfig":"8"},{"size":7986,"mtime":1607398288867,"results":"11","hashOfConfig":"8"},{"size":6617,"mtime":1607398317349,"results":"12","hashOfConfig":"8"},{"size":4307,"mtime":1607398175895,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1nctq8h",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"16"},"/home/runner/Create-React-App-3/src/index.js",[],["31","32"],"/home/runner/Create-React-App-3/src/App.js",["33"],"import logo from './logo.svg';\nimport Space from './Images/space.jpg';\nimport './App.css';\nimport SortingActivity from './components/SortingActivity';\nimport LoopsActivity from './components/LoopsActivity';\nimport VariablesActivity from './components/VariableActivity'\nimport ConditionalActivity from './components/ConditionalActivity'\nimport { Router, Route, browserHistory } from 'react-router';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div \n      style={{\n        backgroundImage: \"url(\" + Space + \")\", \n        backgroundSize: \"100%\",\n        backgroundRepeat: \"repeat\",\n        height: \"100vh\",\n        color: \"white\",\n        overflow: \"scroll\"\n      }}>\n        <Router history={browserHistory} >\n\n            <Route path='/' component={() => <VariablesActivity/>} />\n\n            <Route path='/conditional' component={() => <ConditionalActivity/>} />\n\n            <Route path='/loops' component={() => <LoopsActivity/>} />\n\n            <Route path='/sorting' component={() => <SortingActivity/>} />\n\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","/home/runner/Create-React-App-3/src/components/SortingActivity.js",["34","35"],"import React, { Component } from 'react';\nimport { Container, Row, Col, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { browserHistory } from 'react-router';\nlet PUT_CONDITION_HERE = false \nlet j = 0\n\nclass SortingActivity extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentList: [],\n            currentString: '',\n            isInputValid: false,\n            simulationSteps: [],\n            userCodeOutput: []\n        }\n    }\n\n    /*\n    * This is where you will code for the bubble sort method\n    */\n    bubbleSort = (list) => {\n        let lengthOfList = list.length\n        /*\n        * Step 1:\n        * create a variable to keep track of the number of times you perform bubble sort\n        */\n        // create variable here\n\n        /*\n        * Step 2:\n        * run the bubble sort loop the correct number of times\n        * Hint: You will want to run this for each element in the list\n        */\n        while (PUT_CONDITION_HERE) {\n\n            /*\n            * Step 4:\n            * create a variable to keep track of where you are swapping for this iteration in the list\n            * Think of this as a pointer that will show where you want to swap\n            * In the animation, this would be where the bars are colored\n            * Name this variable j\n            */\n            // create a variable here\n\n            /*\n            * Step 5:\n            * make the condition for the loop that takes care of swapping the variables\n            * this can be thought of as a \"pointer\"\n            * it points to the current element of the list\n            * Hint: You will want to have the pointer go through each element in the list\n            */\n            while (PUT_CONDITION_HERE) {\n\n                /*\n                * Step 6:\n                * Check if the number to the right of it in the list is greater than the number the pointer is looking at\n                * Since we haven't went over lists, to access these numbers use:\n                * list[j] and list[j + 1]\n                * The pseudo code will also help you with this!\n                */\n                if (PUT_CONDITION_HERE) {\n                    // this swaps the position of the two items in the list\n                    let temp = list[j]\n                    list[j] = list[j+1]\n                    list[j+1] = temp\n                }\n\n                /*\n                * Step 7:\n                * Add 1 to the pointer variable to move the pointer up the list\n                */\n               // increment pointer variable here\n            }\n\n            /*\n            * Step 3:\n            * Add 1 to the first variable to make sure the loop doesn't run forever\n            */\n            // increment variable here\n        }\n\n\n        return list;\n    }\n\n    simulateCompletedBubbleSort = (list) => {\n        if (list === undefined || list === null || list.length === 0 || list.length === 1) {\n            return;\n        }\n        for (let i = 0; i < list.length - 1; i++) {\n            for (let j = 0; j < list.length - i - 1; j++) {\n                // on every iteration, show simulated states\n                let currentSimulatedStates = this.state.simulationSteps;\n                // adding a deepcopy of the list\n                currentSimulatedStates.push({\n                    'array': list.map(element => element),\n                    'i': j,\n                    'j': j + 1\n                });\n                this.setState({\n                    simulationSteps: currentSimulatedStates\n                })\n\n                if (list[j] > list[j + 1]) {\n                    console.log(\"Sorting\");\n                    let temp = list[j];\n                    list[j] = list[j + 1];\n                    list[j + 1] = temp;\n                }\n\n                \n            }\n        }\n        // add sorted array\n        let currentSimulatedStates = this.state.simulationSteps;\n        currentSimulatedStates.push({\n            'array': list.map(element => element),\n            'i': null,\n            'j': null\n        });\n        this.setState({\n            simulationSteps: currentSimulatedStates\n        })\n        console.log(list);\n        return list;\n    }\n\n    onRunSortClick = async () => {\n        console.log(\"Running Student's Code\");\n        let listCopy = this.state.currentList.map(element => element);\n        let sorted = this.bubbleSort(listCopy);\n        await this.setState({\n            userCodeOutput: sorted\n        })\n\n        await console.log(this.state.userCodeOutput)\n    }\n\n    onSimulateSortClick = async () => {\n        console.log(\"Running Actual Bubble Sort\");\n        console.log(this.state.simulationSteps);\n        let listCopy = this.state.currentList.map(element => element);\n        const initialSteps = [{\n            'array': listCopy.map(element => element),\n            'i': 0,\n            'j': 1\n        }]\n        await this.setState({\n            simulationSteps: initialSteps\n        })\n        let sorted = this.simulateCompletedBubbleSort(listCopy);\n        console.log(listCopy);\n        console.log(sorted);\n        console.log(this.state.simulationSteps);\n\n        \n    }\n\n    onCurrentStringChange = async (e) => {\n        const curr = e.target.value;\n        await this.setState({\n            currentString: curr\n        });\n        const isValid = this.parseStringToList();\n        await console.log(this.state.currentString);\n    }\n\n    parseStringToList = () => {\n        const currentString = this.state.currentString;\n        // If current string is empty, input is invalid\n        if (currentString === '') {\n            this.setState({\n                isInputValid: false,\n                currentList: []\n            })\n        }\n\n        // if current string is non empty, but has no commas, input is invalid so return\n        let split = currentString.split(\",\");\n        if (split === undefined || split === null) {\n            this.setState({\n                isInputValid: false\n            })\n            return false;\n        }\n\n        // if current string is non-empty and input has commas, but has non-numbers, input is invalid so return\n        let numList = [];\n        for (let i = 0; i < split.length; i++) {\n            const number = parseInt(split[i]);\n            if (isNaN(number)) {\n                this.setState({\n                    isInputValid: false\n                })\n                return false;\n            }\n            numList.push(parseInt(split[i]));\n        }\n\n        // if input is perfectly valid, set state and return\n        this.setState({\n            currentList: numList,\n            isInputValid: true\n        });\n\n        console.log({numList: numList});\n    }\n\n    showSimulatedSteps = (steps) => {\n        if (steps === null || steps === undefined || steps.length === 0) {\n            return;\n        }\n        let display = [];\n        for (let i = 0; i < steps.length; i++) {\n            const currentState = <li> { steps[i]['array'].toString() } </li>\n            display.push(currentState);\n        }\n\n        return display;\n    }\n\n    formatSimulationStates = (states) => {\n        if (states === undefined || states === null) {\n            return;\n        }\n\n        let formattedStates = [];\n        for (let i = 0; i < states.length; i++) {\n            let formattedArray = this.formatArray(states[i]);\n            formattedStates.push(<li> { formattedArray } </li>);\n        }\n        return formattedStates;\n    }\n\n    formatArray = (state) => {\n        if (state === null || state === undefined) {\n            return;\n        }\n\n        const array = state['array']\n        if (array === null || array === undefined || array.length === 0) {\n            return;\n        }\n\n        const redColor = '#FF0000';\n        const greenColor = '#00FF00';\n        const i = state['i'];\n        const j = state['j'];\n\n        let out = [];\n        for (let x = 0; x < array.length; x++) {\n            let styledElement;\n            if (x === i) {\n                styledElement = (<span style={{color: redColor}}> { array[x] } </span>);\n            } else if (x === j) {\n                styledElement = (<span style={{color: greenColor}}> { array[x] } </span>);\n            } else {\n                styledElement = ( <span> { array[x] } </span>)\n            }\n\n            out.push(<span> { styledElement } </span>)\n            out.push(<span>,</span>)\n        }\n\n        out.pop();\n        return out;\n    }\n\n    handleBack = () => {\n        browserHistory.push('/loops');\n    }\n\n    render() {\n        return (\n            <div>\n                <Container style={{textAlign: 'center'}}>\n                    <br/>\n                    <h2>Sorting Activity</h2>\n                    <hr/>\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <h4>Please Input a List of Numbers to Sort</h4>\n                                </Col>\n                                <Col>\n                                    <InputGroup className='mb-3'>\n                                        <FormControl onChange={this.onCurrentStringChange} placeholder='Example: 10,7,6,9,1' />\n                                    </InputGroup>\n                                </Col>\n                            </Row>\n                            <br/>\n                            <Row>\n                                <Col>\n                                    <h4>Your Input List is</h4>\n                                </Col>\n                                <Col>\n                                    <h4>\n                                        [ {this.state.currentList.toString()} ]\n                                    </h4>\n                                </Col>\n                            </Row>\n                            \n                            <Row>\n                                <Col>\n                                    <Button disabled={!this.state.isInputValid} onClick={this.onRunSortClick}>\n                                        Run My Sort\n                                    </Button>\n                                </Col>\n                                <Col>\n                                    <Button disabled={!this.state.isInputValid} onClick={this.onSimulateSortClick}>\n                                        Simulate Bubble Sort  \n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    <br/>\n                    <hr/>\n                    <Row>\n                        <Col>\n                            <h4>My Sort Results</h4>\n                                <ul className={'sim-list'}>\n                                    <h4>\n                                        <li>\n                                            {\n                                                this.formatArray({\n                                                    'array': this.state.userCodeOutput,\n                                                    'i': null,\n                                                    'j': null\n                                                })\n                                            }\n                                        </li>\n                                    </h4>\n                                </ul>\n                        </Col>\n                        <Col>\n                               <h4> Simulation Results</h4>\n                                <ul className={'sim-list'}>\n                                    <h4>\n                                        { this.formatSimulationStates(this.state.simulationSteps) }\n                                    </h4>\n                                </ul>\n\n                        </Col>\n                    </Row>\n\n                    <Button onClick={this.handleBack} className={'my-navigation-button'}  >\n                        Go To Previous Activity!\n                    </Button>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default SortingActivity;","/home/runner/Create-React-App-3/src/components/LoopsActivity.js",["36"],"import React, { Component } from 'react';\nimport {Container, Row, Col, Button} from 'react-bootstrap';\nimport { browserHistory } from 'react-router';\n\nconst OriginalPattern  = () => {\n    let stars = [];\n    for (let i = 0; i < 5; i++) {    \n        for (let j = 0; j <= i; j++) {\n            stars.push(\"* \");\n        }\n        stars.push(<br/>);\n    }\n    console.log(\"entered\");\n    return (  \n        <div className=\"star-pattern-one\">  \n            {stars} \n        </div>\n    )\n}\nlet PUT_CONDITION_HERE = false \n\nclass LoopsActivity extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userPattern: 'Complete the TODO to see your pattern here!',\n        }\n    }\n\n    handleProceed = () => {\n        browserHistory.push('/sorting');\n    }\n\n    handleBack = () => {\n        browserHistory.push('/conditional');\n    }\n  \n     /*\n    * This is were you will complete your code for the triangle\n    * This can be a tricky problem when first learning about loops so let's break it down\n    * You will need two loops and one loops will be inside of the other\n    * The first loop will keep track of the row you are on\n    * The second loop with keep track of how many stars you have printed out\n    * \n    * Think of it like this:\n    * First row (first iteration of row loop):\n    *   Only print out 1 stars\n    *   *\n    * Second row (second iteration of row loop):\n    *   Print out 2 stars\n    *   **\n    * Third row (third iteration of row loops):\n    *   Print out 3 stars\n    *   ***\n    * and so on until 5\n    * \n    * Another hint:\n    * The number of stars you print out is directly related to the row you are on\n    */\n    completePattern = () => {\n        // this variable holds your pattern, you need not worry about it\n        let pattern = [];\n\n        /*\n        * Step 1:\n        * Create a regular variable to keep track of what row you are on\n        * Hint: looking at the slide examples might help\n        */\n        let i = 0\n\n        /*\n        * Step 2:\n        * Create the condition for the outer loop using the row variable above\n        * Remember - we only want to have 5 rows\n        */\n        while (i < 5) {\n\n            /*\n            * Step 4:\n            * Create a regular variable to keep track of how many times you print a star in a row\n            * We create the variable here instead of outside of the main loop so that it resets everytime the row loops is run\n            * Try moving it outside of the first loop to see what happens\n            */\n            let j = 0\n\n            /*\n            * Step 5:\n            * Create the condition for the inner loop using the star variable above\n            * Remember - the number of stars we want to print out is directly related to the row number we're on\n            * Hint: we will want to use the row variable in this condition along with the star variable\n            */\n            while (j <= i) {\n                \n                // this will add our star to the pattern for us\n                pattern.push(\"* \");\n\n                /*\n                * Step 6:\n                * Add 1 to the value of the star variable so that it is updated each time the loop is run\n                * If we forget this, it will print out an infinite number of stars for that row\n                */\n                j++\n            }\n            // this line of code starts a new line for each row\n            pattern.push(<br/>);\n            /*\n            * Step 3:\n            * Add 1 to the value of the row variable so that it is updated each time the loop runs\n            * If we forget this, the loop will run forever\n            */\n            // increment row variable here\n            i++\n        }\n\n        this.setState ({ userPattern: pattern });\n        return pattern;\n    }\n\n    render() {\n        return (\n            <Container style={{textAlign: 'center'}}>\n                <br/>\n                <h2>Loops Activity</h2>\n                <Col>\n                    <Row>\n                        <Col>\n                            <div>\n                                <h4>We can use this activity to understand how for loops work. </h4>\n                            </div>\n                            <hr/>\n                            <div>\n                                <h5>Given below on the left hand side is a pattern of stars obtained from\n                                    using nested for loops. The first for loop specifies the row number \n                                    for the pattern which in this case runs from 1 to 5. The second for loop \n                                    specifies the number of stars needed on each row of the pattern, which again\n                                    ranges from 1 to 5, depending on the row number. \n                                </h5>\n                                <br></br>\n                                <h5>Write a nested for loop to display the same pattern on the right hand side.\n                                    Hit the Display Pattern button to test your code periodically and compare your pattern with the correct \n                                    one of the left hand side.\n                                </h5>\n                            </div>\n                            <hr/>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Container>\n                                <h5>Correct Pattern</h5>\n                               \n                                <Container \n                                    style={{\n                                        color: '#7FFF00', \n                                        width: '60%',\n                                        marginLeft: \"200px\"\n                                    }}>\n                                    <Col>\n                                    <Row >\n                                        <OriginalPattern/>      \n                                    </Row>\n                                    </Col>\n                                </Container>\n                            </Container>\n                        </Col>\n                        <Col>\n                            <Container>\n                                <h5>Your Pattern</h5>\n                               \n                                <Container \n                                    style={{\n                                        color: 'yellow', \n                                        width: '70%',\n                                        textAlign: \"center\"\n                                    }}>\n                                    <Col>\n                                        <div className=\"star-pattern-two\">\n                                            {this.state.userPattern}      \n                                        </div>\n                                        <br/>\n                                        <br/>\n                                        <br/>\n                                        <div style={{marginLeft: \"12px\"}}>\n                                            <Button onClick={this.completePattern}>\n                                                Display Pattern\n                                            </Button>\n                                        </div>\n\n                                    </Col>\n                                </Container>\n                            </Container>\n                        </Col>\n                    </Row>\n                </Col>\n\n                <Button onClick={this.handleBack} className={'my-navigation-button'} >\n                    Go To Previous Activity!\n                </Button>\n\n                <Button onClick={this.handleProceed} className={'my-navigation-button'} >\n                    Proceed To Next Activity!\n                </Button>\n            </Container>\n            \n        );\n    }\n}\n\nexport default LoopsActivity;","/home/runner/Create-React-App-3/src/components/ConditionalActivity.js",["37","38"],"/home/runner/Create-React-App-3/src/components/VariableActivity.js",["39"],"import React, { Component } from 'react';\nimport { Form, Button, Container, Card} from 'react-bootstrap'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { browserHistory } from 'react-router';\nlet ourPhrase = \"\"\nclass VariableActivity extends Component {\n    constructor(props) {\n        super(props);\n        this.currentPhraseIndex = 0\n        this.phrases = [\n            \"loves coding!\",\n            \"is awesome!\",\n            \"can do anything they set their mind to!\",\n            \"is powerful!\",\n            \"is inspirational!\",\n            \"is a genius!\",\n            \"is hardworking!\"\n        ]\n    }\n\n    state = {\n        textBoxValue: \"\",\n        phrase: \"\",\n        name: \"\"\n    };\n    \n    /*\n    * Learning note for onSubmit:\n    * This particular method is called whenever the \"Go!\" button is pressed\n    * What it is doing is assigning the value in the text box to your name variable\n    * This variable is accessed to be displayed for you to see in the JSX code below\n    */\n    onSubmit = () => {\n        this.setState({\n            name: this.state.textBoxValue\n        })\n    };\n    \n    getRandomPhrase = (phrase, name) => {\n\n        /* Step 1:\n        * Create and assign a new variable named ourPhrase here\n        * create a new regular variable that joins the parameter name with the parameter phrase\n        * You will need to use name and pharse\n        * Remember: we can add strings together using concatenation (+)\n        * You can play around with this by adding extra spaces, changing the order, etx.\n        */\n        \n       this.setState({\n           phrase: ourPhrase\n       })\n    }\n\n    handleProceed = () => {\n        browserHistory.push('/conditional');\n    }\n\n    render() {\n        return (\n        <Container >\n            <br/>\n            <h2 style={{textAlign: \"center\"}}>Variables Activity</h2>\n            <hr/>\n            <Row style={{textAlign: \"center\"}} className=\"justify-content-md-center\">\n                <Col >\n                    <Row className=\"justify-content-md-center\">\n                    <Form.Label><h4>Enter Your Variable Below!</h4></Form.Label>\n                    </Row>  \n                    <Row className=\"justify-content-md-center\">\n                    <Form.Group >\n                        <Form.Control\n                        placeholder=\"Your Name Here\"\n                        value={this.state.textBoxValue}\n                        onChange={e => this.setState({ textBoxValue: e.target.value})}\n                        type=\"text\"\n                        />\n                        <Button\n                        className=\"btnFormSend\"\n                        onClick={this.onSubmit}\n                        >\n                        Go!\n                        </Button>\n                        <br/>\n                    </Form.Group> \n                    </Row> \n                </Col>\n            </Row>\n            <Row style={{color: \"white\"}} className=\"justify-content-md-center\">\n                    <h4> Name = <span style={{color: \"#7FFF00\"}}>{this.state.name}</span></h4>     \n            </Row>\n            <hr/>\n            <Row style={{color: \"white\"}} className=\"justify-content-md-center\">\n                <h4>Make a random phrase with your variable name!</h4>\n            </Row>\n            <br/>\n            <Row className=\"justify-content-md-center\">\n                <Button\n                className=\"btnFormSend\"\n                onClick={() => {\n                    let newPhrase = this.phrases[this.currentPhraseIndex]\n                    this.currentPhraseIndex += 1\n                    this.currentPhraseIndex %= 7\n                    this.getRandomPhrase(newPhrase, this.state.name)\n                }}\n                >\n                Make my random phrase!\n                </Button>\n            </Row>\n            <br/>\n            <Row style={{color: \"#7FFF00\"}} className=\"justify-content-md-center\">\n                <div>\n                    <h4>{this.state.phrase}</h4>\n                </div>\n               \n            </Row>\n\n            <Button onClick={this.handleProceed} className={'my-navigation-button'} >\n                Proceed To Next Activity!\n            </Button>\n        </Container>\n\n        );\n      }\n}\n\nexport default VariableActivity;",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":1,"column":8,"nodeType":"46","messageId":"47","endLine":1,"endColumn":12},{"ruleId":"44","severity":1,"message":"48","line":23,"column":13,"nodeType":"46","messageId":"47","endLine":23,"endColumn":25},{"ruleId":"44","severity":1,"message":"49","line":165,"column":15,"nodeType":"46","messageId":"47","endLine":165,"endColumn":22},{"ruleId":"44","severity":1,"message":"50","line":20,"column":5,"nodeType":"46","messageId":"47","endLine":20,"endColumn":23},{"ruleId":"44","severity":1,"message":"51","line":2,"column":35,"nodeType":"46","messageId":"47","endLine":2,"endColumn":39},{"ruleId":"52","severity":1,"message":"53","line":8,"column":5,"nodeType":"54","messageId":"55","endLine":11,"endColumn":6},{"ruleId":"44","severity":1,"message":"51","line":2,"column":35,"nodeType":"46","messageId":"47","endLine":2,"endColumn":39},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'lengthOfList' is assigned a value but never used.","'isValid' is assigned a value but never used.","'PUT_CONDITION_HERE' is assigned a value but never used.","'Card' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]