[{"/home/runner/Create-React-App-3/src/index.js":"1","/home/runner/Create-React-App-3/src/App.js":"2","/home/runner/Create-React-App-3/src/components/SortingActivity.js":"3","/home/runner/Create-React-App-3/src/components/LoopsActivity.js":"4","/home/runner/Create-React-App-3/src/components/ConditionalActivity.js":"5","/home/runner/Create-React-App-3/src/components/VariableActivity.js":"6"},{"size":505,"mtime":1607397823957,"results":"7","hashOfConfig":"8"},{"size":1067,"mtime":1607398793588,"results":"9","hashOfConfig":"8"},{"size":12200,"mtime":1607395572788,"results":"10","hashOfConfig":"8"},{"size":8064,"mtime":1607398749893,"results":"11","hashOfConfig":"8"},{"size":6550,"mtime":1607398802689,"results":"12","hashOfConfig":"8"},{"size":4302,"mtime":1607398814890,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1nctq8h",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/runner/Create-React-App-3/src/index.js",[],["28","29"],"/home/runner/Create-React-App-3/src/App.js",[],"/home/runner/Create-React-App-3/src/components/SortingActivity.js",["30","31"],"import React, { Component } from 'react';\nimport { Container, Row, Col, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { browserHistory } from 'react-router';\nlet PUT_CONDITION_HERE = false \nlet j = 0\n\nclass SortingActivity extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentList: [],\n            currentString: '',\n            isInputValid: false,\n            simulationSteps: [],\n            userCodeOutput: []\n        }\n    }\n\n    /*\n    * This is where you will code for the bubble sort method\n    */\n    bubbleSort = (list) => {\n        let lengthOfList = list.length\n        /*\n        * Step 1:\n        * create a variable to keep track of the number of times you perform bubble sort\n        */\n        // create variable here\n\n        /*\n        * Step 2:\n        * run the bubble sort loop the correct number of times\n        * Hint: You will want to run this for each element in the list\n        */\n        while (PUT_CONDITION_HERE) {\n\n            /*\n            * Step 4:\n            * create a variable to keep track of where you are swapping for this iteration in the list\n            * Think of this as a pointer that will show where you want to swap\n            * In the animation, this would be where the bars are colored\n            * Name this variable j\n            */\n            // create a variable here\n\n            /*\n            * Step 5:\n            * make the condition for the loop that takes care of swapping the variables\n            * this can be thought of as a \"pointer\"\n            * it points to the current element of the list\n            * Hint: You will want to have the pointer go through each element in the list\n            */\n            while (PUT_CONDITION_HERE) {\n\n                /*\n                * Step 6:\n                * Check if the number to the right of it in the list is greater than the number the pointer is looking at\n                * Since we haven't went over lists, to access these numbers use:\n                * list[j] and list[j + 1]\n                * The pseudo code will also help you with this!\n                */\n                if (PUT_CONDITION_HERE) {\n                    // this swaps the position of the two items in the list\n                    let temp = list[j]\n                    list[j] = list[j+1]\n                    list[j+1] = temp\n                }\n\n                /*\n                * Step 7:\n                * Add 1 to the pointer variable to move the pointer up the list\n                */\n               // increment pointer variable here\n            }\n\n            /*\n            * Step 3:\n            * Add 1 to the first variable to make sure the loop doesn't run forever\n            */\n            // increment variable here\n        }\n\n\n        return list;\n    }\n\n    simulateCompletedBubbleSort = (list) => {\n        if (list === undefined || list === null || list.length === 0 || list.length === 1) {\n            return;\n        }\n        for (let i = 0; i < list.length - 1; i++) {\n            for (let j = 0; j < list.length - i - 1; j++) {\n                // on every iteration, show simulated states\n                let currentSimulatedStates = this.state.simulationSteps;\n                // adding a deepcopy of the list\n                currentSimulatedStates.push({\n                    'array': list.map(element => element),\n                    'i': j,\n                    'j': j + 1\n                });\n                this.setState({\n                    simulationSteps: currentSimulatedStates\n                })\n\n                if (list[j] > list[j + 1]) {\n                    console.log(\"Sorting\");\n                    let temp = list[j];\n                    list[j] = list[j + 1];\n                    list[j + 1] = temp;\n                }\n\n                \n            }\n        }\n        // add sorted array\n        let currentSimulatedStates = this.state.simulationSteps;\n        currentSimulatedStates.push({\n            'array': list.map(element => element),\n            'i': null,\n            'j': null\n        });\n        this.setState({\n            simulationSteps: currentSimulatedStates\n        })\n        console.log(list);\n        return list;\n    }\n\n    onRunSortClick = async () => {\n        console.log(\"Running Student's Code\");\n        let listCopy = this.state.currentList.map(element => element);\n        let sorted = this.bubbleSort(listCopy);\n        await this.setState({\n            userCodeOutput: sorted\n        })\n\n        await console.log(this.state.userCodeOutput)\n    }\n\n    onSimulateSortClick = async () => {\n        console.log(\"Running Actual Bubble Sort\");\n        console.log(this.state.simulationSteps);\n        let listCopy = this.state.currentList.map(element => element);\n        const initialSteps = [{\n            'array': listCopy.map(element => element),\n            'i': 0,\n            'j': 1\n        }]\n        await this.setState({\n            simulationSteps: initialSteps\n        })\n        let sorted = this.simulateCompletedBubbleSort(listCopy);\n        console.log(listCopy);\n        console.log(sorted);\n        console.log(this.state.simulationSteps);\n\n        \n    }\n\n    onCurrentStringChange = async (e) => {\n        const curr = e.target.value;\n        await this.setState({\n            currentString: curr\n        });\n        const isValid = this.parseStringToList();\n        await console.log(this.state.currentString);\n    }\n\n    parseStringToList = () => {\n        const currentString = this.state.currentString;\n        // If current string is empty, input is invalid\n        if (currentString === '') {\n            this.setState({\n                isInputValid: false,\n                currentList: []\n            })\n        }\n\n        // if current string is non empty, but has no commas, input is invalid so return\n        let split = currentString.split(\",\");\n        if (split === undefined || split === null) {\n            this.setState({\n                isInputValid: false\n            })\n            return false;\n        }\n\n        // if current string is non-empty and input has commas, but has non-numbers, input is invalid so return\n        let numList = [];\n        for (let i = 0; i < split.length; i++) {\n            const number = parseInt(split[i]);\n            if (isNaN(number)) {\n                this.setState({\n                    isInputValid: false\n                })\n                return false;\n            }\n            numList.push(parseInt(split[i]));\n        }\n\n        // if input is perfectly valid, set state and return\n        this.setState({\n            currentList: numList,\n            isInputValid: true\n        });\n\n        console.log({numList: numList});\n    }\n\n    showSimulatedSteps = (steps) => {\n        if (steps === null || steps === undefined || steps.length === 0) {\n            return;\n        }\n        let display = [];\n        for (let i = 0; i < steps.length; i++) {\n            const currentState = <li> { steps[i]['array'].toString() } </li>\n            display.push(currentState);\n        }\n\n        return display;\n    }\n\n    formatSimulationStates = (states) => {\n        if (states === undefined || states === null) {\n            return;\n        }\n\n        let formattedStates = [];\n        for (let i = 0; i < states.length; i++) {\n            let formattedArray = this.formatArray(states[i]);\n            formattedStates.push(<li> { formattedArray } </li>);\n        }\n        return formattedStates;\n    }\n\n    formatArray = (state) => {\n        if (state === null || state === undefined) {\n            return;\n        }\n\n        const array = state['array']\n        if (array === null || array === undefined || array.length === 0) {\n            return;\n        }\n\n        const redColor = '#FF0000';\n        const greenColor = '#00FF00';\n        const i = state['i'];\n        const j = state['j'];\n\n        let out = [];\n        for (let x = 0; x < array.length; x++) {\n            let styledElement;\n            if (x === i) {\n                styledElement = (<span style={{color: redColor}}> { array[x] } </span>);\n            } else if (x === j) {\n                styledElement = (<span style={{color: greenColor}}> { array[x] } </span>);\n            } else {\n                styledElement = ( <span> { array[x] } </span>)\n            }\n\n            out.push(<span> { styledElement } </span>)\n            out.push(<span>,</span>)\n        }\n\n        out.pop();\n        return out;\n    }\n\n    handleBack = () => {\n        browserHistory.push('/loops');\n    }\n\n    render() {\n        return (\n            <div>\n                <Container style={{textAlign: 'center'}}>\n                    <br/>\n                    <h2>Sorting Activity</h2>\n                    <hr/>\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <h4>Please Input a List of Numbers to Sort</h4>\n                                </Col>\n                                <Col>\n                                    <InputGroup className='mb-3'>\n                                        <FormControl onChange={this.onCurrentStringChange} placeholder='Example: 10,7,6,9,1' />\n                                    </InputGroup>\n                                </Col>\n                            </Row>\n                            <br/>\n                            <Row>\n                                <Col>\n                                    <h4>Your Input List is</h4>\n                                </Col>\n                                <Col>\n                                    <h4>\n                                        [ {this.state.currentList.toString()} ]\n                                    </h4>\n                                </Col>\n                            </Row>\n                            \n                            <Row>\n                                <Col>\n                                    <Button disabled={!this.state.isInputValid} onClick={this.onRunSortClick}>\n                                        Run My Sort\n                                    </Button>\n                                </Col>\n                                <Col>\n                                    <Button disabled={!this.state.isInputValid} onClick={this.onSimulateSortClick}>\n                                        Simulate Bubble Sort  \n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    <br/>\n                    <hr/>\n                    <Row>\n                        <Col>\n                            <h4>My Sort Results</h4>\n                                <ul className={'sim-list'}>\n                                    <h4>\n                                        <li>\n                                            {\n                                                this.formatArray({\n                                                    'array': this.state.userCodeOutput,\n                                                    'i': null,\n                                                    'j': null\n                                                })\n                                            }\n                                        </li>\n                                    </h4>\n                                </ul>\n                        </Col>\n                        <Col>\n                               <h4> Simulation Results</h4>\n                                <ul className={'sim-list'}>\n                                    <h4>\n                                        { this.formatSimulationStates(this.state.simulationSteps) }\n                                    </h4>\n                                </ul>\n\n                        </Col>\n                    </Row>\n\n                    <Button onClick={this.handleBack} className={'my-navigation-button'}  >\n                        Go To Previous Activity!\n                    </Button>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default SortingActivity;","/home/runner/Create-React-App-3/src/components/LoopsActivity.js",[],"/home/runner/Create-React-App-3/src/components/ConditionalActivity.js",[],"/home/runner/Create-React-App-3/src/components/VariableActivity.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":23,"column":13,"nodeType":"38","messageId":"39","endLine":23,"endColumn":25},{"ruleId":"36","severity":1,"message":"40","line":165,"column":15,"nodeType":"38","messageId":"39","endLine":165,"endColumn":22},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'lengthOfList' is assigned a value but never used.","Identifier","unusedVar","'isValid' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]